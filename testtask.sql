USE test_task;
GO

-- временная таблица
CREATE TABLE #DateCountTable (
    _date DATE NOT NULL,
    _count INT NOT NULL
);
GO
-- во входных данных в задании не было дат с разными годами,
-- но я решил для теста написать разные даты,
-- из-за этого пришлось дописать алгоритм и теперь
-- это должно работать с любыми датами
INSERT INTO #DateCountTable (_date, _count)
VALUES 
    ('2022-05-04', 5),
    ('2022-05-03', 2),
    ('2022-07-02', 6),
    ('2022-12-01', 3),
    ('2022-10-01', 1),
    ('2022-10-15', 1),
    ('2022-10-27', 7),
    ('2022-07-03', 2),
	('2022-05-04', 5),
    ('2022-05-03', 2),
    ('2023-07-02', 6),
    ('2023-11-01', 3),
    ('2023-05-01', 1),
    ('2023-05-15', 3),
    ('2023-05-27', 7),
    ('2024-07-03', 2)
GO

-- CTE для группировки данных
WITH AggregatedData AS (
    SELECT 
		-- я думал использовать ли CASE WHEN вместо IIF,
		-- но подумал, что раз уж сказано написать на T-SQL,
		-- то нужно использовать фичи T-SQL
        IIF(DAY(_date) = 1,				-- если дата - первое число месяца
		FORMAT(_date, 'dd.MM.yyyy'),	-- то дата форматируется так
		FORMAT(_date, 'MM.yyyy'))		-- в противном случае так
		AS _date,
        SUM(_count) AS _count
    FROM #DateCountTable
    GROUP BY 
		-- группируется по дате с первым числом и без первого числа
        IIF(DAY(_date) = 1, FORMAT(_date, 'dd.MM.yyyy'), FORMAT(_date, 'MM.yyyy'))
		
)

SELECT 
    _date,
    _count
FROM AggregatedData
ORDER BY 
	-- явное преобразование строки в дату для сортировки
	-- подставили 01. к датам MM.yyyy для того, чтобы
	-- даты шли в хронологическом порядке
    IIF(LEN(_date) = 10, TRY_CAST(_date AS DATE), TRY_CAST('01.' + _date AS DATE))
GO

-- логическое завершение работы с временной таблицей
DROP TABLE #DateCountTable;
GO
-- Конечно, конвертировать даты в строку, чтобы потом конвертировать обратно в дату
-- для упорядочивания может быть не совсем правильно performance-wise, но
-- я думаю, что try_cast достаточно быстро конвертирует дату и проблем не должно быть